// pages/Manager/ServicePrice.jsx
import React, { useEffect, useState } from 'react';
import { Card, Button } from '../../components/ui/ui';
import './ServicePrice.css';

const fakeServices = [
    {
        serviceID: 1,
        serviceName: 'X√©t nghi·ªám ADN cha con',
        serviceType: 'D√¢n s·ª±',
        packageType: 'Ti√™u chu·∫©n',
        price: 2500000,
        status: 'Ho·∫°t ƒë·ªông',
        extraSampleFee: 500000
    },
    {
        serviceID: 2,
        serviceName: 'X√©t nghi·ªám ADN m·∫π con',
        serviceType: 'D√¢n s·ª±',
        packageType: 'L·∫•y nhanh',
        price: 2300000,
        status: 'Ho·∫°t ƒë·ªông',
        extraSampleFee: 300000
    },
    {
        serviceID: 3,
        serviceName: 'X√©t nghi·ªám ADN anh em ru·ªôt',
        serviceType: 'H√†nh ch√≠nh',
        packageType: 'Ti√™u chu·∫©n',
        price: 2800000,
        status: 'Ng·ª´ng ho·∫°t ƒë·ªông',
        extraSampleFee: 600000
    }
];

const fakeSurcharges = [
    {
        surchargeID: 1,
        sampleType: 'M·∫´u t√≥c',
        surcharge: 200000,
        note: 'Ph√≠ b·ªï sung cho m·∫´u t√≥c c√≥ ch·∫•t l∆∞·ª£ng k√©m'
    },
    {
        surchargeID: 2,
        sampleType: 'M·∫´u m√≥ng tay',
        surcharge: 300000,
        note: 'Ph√≠ b·ªï sung cho m·∫´u m√≥ng tay'
    },
    {
        surchargeID: 3,
        sampleType: 'M·∫´u n∆∞·ªõc b·ªçt',
        surcharge: 150000,
        note: 'Ph√≠ b·ªï sung cho m·∫´u n∆∞·ªõc b·ªçt ch·∫•t l∆∞·ª£ng th·∫•p'
    }
];

export default function ServicePrice() {
    const [services, setServices] = useState([]);
    const [surcharges, setSurcharges] = useState([]);
    const [activeTab, setActiveTab] = useState('services');
    const [loading, setLoading] = useState(true);
    const [searchTerm, setSearchTerm] = useState('');
    const [statusFilter, setStatusFilter] = useState('all');
    const [editingService, setEditingService] = useState(null);
    const [editingSurcharge, setEditingSurcharge] = useState(null);
    const [showAddServiceForm, setShowAddServiceForm] = useState(false);
    const [showAddSurchargeForm, setShowAddSurchargeForm] = useState(false);

    useEffect(() => {
        setTimeout(() => {
            setServices(fakeServices);
            setSurcharges(fakeSurcharges);
            setLoading(false);
        }, 300);
    }, []);

    // L·ªçc services
    const filteredServices = services.filter(service => {
        const matchesSearch = service.serviceName.toLowerCase().includes(searchTerm.toLowerCase()) ||
                             service.serviceType.toLowerCase().includes(searchTerm.toLowerCase()) ||
                             service.packageType.toLowerCase().includes(searchTerm.toLowerCase());
        const matchesStatus = statusFilter === 'all' || service.status === statusFilter;
        return matchesSearch && matchesStatus;
    });

    // L·ªçc surcharges
    const filteredSurcharges = surcharges.filter(surcharge => {
        return surcharge.sampleType.toLowerCase().includes(searchTerm.toLowerCase());
    });

    const handleEditService = (service) => {
        setEditingService(service);
    };

    const handleSaveService = (updatedService) => {
        setServices(services.map(s => 
            s.serviceID === updatedService.serviceID ? updatedService : s
        ));
        setEditingService(null);
    };

    const handleDeleteService = (serviceID) => {
        if (window.confirm('B·∫°n c√≥ ch·∫Øc ch·∫Øn mu·ªën x√≥a d·ªãch v·ª• n√†y?')) {
            setServices(services.filter(s => s.serviceID !== serviceID));
        }
    };

    const handleEditSurcharge = (surcharge) => {
        setEditingSurcharge(surcharge);
    };

    const handleSaveSurcharge = (updatedSurcharge) => {
        setSurcharges(surcharges.map(s => 
            s.surchargeID === updatedSurcharge.surchargeID ? updatedSurcharge : s
        ));
        setEditingSurcharge(null);
    };

    const handleDeleteSurcharge = (surchargeID) => {
        if (window.confirm('B·∫°n c√≥ ch·∫Øc ch·∫Øn mu·ªën x√≥a ph·ª• ph√≠ n√†y?')) {
            setSurcharges(surcharges.filter(s => s.surchargeID !== surchargeID));
        }
    };

    if (loading) {
        return <div className="loading">ƒêang t·∫£i...</div>;
    }

    return (
        <div className="service-price-container">
            {/* Header ch√≠nh */}
            <div className="main-header">
                <h1 className="page-title">Qu·∫£n l√Ω gi√° d·ªãch v·ª•</h1>
                <p className="page-subtitle">Qu·∫£n l√Ω th√¥ng tin v√† gi√° c·ªßa c√°c d·ªãch v·ª• x√©t nghi·ªám ADN</p>
            </div>

            {/* Tabs */}
            <div className="tabs-container">
                <button 
                    className={`tab ${activeTab === 'services' ? 'active' : ''}`}
                    onClick={() => setActiveTab('services')}
                >
                    <span className="tab-icon">‚öïÔ∏è</span>
                    Qu·∫£n l√Ω D·ªãch v·ª•
                </button>
                <button 
                    className={`tab ${activeTab === 'surcharges' ? 'active' : ''}`}
                    onClick={() => setActiveTab('surcharges')}
                >
                    <span className="tab-icon">üí∞</span>
                    Qu·∫£n l√Ω Ph·ª• ph√≠
                </button>
            </div>

            {activeTab === 'services' && (
                <div className="content-section">
                    <Card className="info-card">
                        <div className="card-header">
                            <div className="header-content">
                                <h2 className="section-title">
                                    <span className="title-icon">üß¨</span>
                                    Danh s√°ch D·ªãch v·ª•
                                </h2>
                                <p className="section-subtitle">Qu·∫£n l√Ω th√¥ng tin v√† gi√° c·ªßa c√°c d·ªãch v·ª• x√©t nghi·ªám ADN</p>
                            </div>
                        </div>

                        {/* B·ªô l·ªçc v√† t√¨m ki·∫øm */}
                        <div className="filter-section">
                            <div className="search-container">
                                <div className="search-box">
                                    <span className="search-icon">üîç</span>
                                    <input
                                        type="text"
                                        placeholder="T√¨m ki·∫øm d·ªãch v·ª•..."
                                        value={searchTerm}
                                        onChange={(e) => setSearchTerm(e.target.value)}
                                        className="search-input"
                                    />
                                </div>
                            </div>
                            <div className="filter-controls">
                                <div className="filter-group">
                                    <label className="filter-label">Tr·∫°ng th√°i:</label>
                                    <select 
                                        value={statusFilter}
                                        onChange={(e) => setStatusFilter(e.target.value)}
                                        className="status-filter"
                                    >
                                        <option value="all">T·∫•t c·∫£ tr·∫°ng th√°i</option>
                                        <option value="Ho·∫°t ƒë·ªông">Ho·∫°t ƒë·ªông</option>
                                        <option value="Ng·ª´ng ho·∫°t ƒë·ªông">Ng·ª´ng ho·∫°t ƒë·ªông</option>
                                    </select>
                                </div>
                                <Button 
                                    onClick={() => setShowAddServiceForm(true)}
                                    className="add-button primary"
                                >
                                    <span className="btn-icon">‚ûï</span>
                                    Th√™m D·ªãch v·ª• M·ªõi
                                </Button>
                            </div>
                        </div>

                        {/* B·∫£ng d·ªãch v·ª• */}
                        <div className="table-container">
                            <div className="table-responsive">
                                <table className="services-table">
                                    <thead>
                                        <tr>
                                            <th className="th-id">ID</th>
                                            <th className="th-name">T√™n D·ªãch v·ª•</th>
                                            <th className="th-type">Lo·∫°i d·ªãch v·ª•</th>
                                            <th className="th-package">G√≥i d·ªãch v·ª•</th>
                                            <th className="th-price">Gi√° (VNƒê)</th>
                                            <th className="th-extra">Ph√≠ m·∫´u th·ª© 3 (VNƒê)</th>
                                            <th className="th-status">Tr·∫°ng th√°i</th>
                                            <th className="th-actions">H√†nh ƒë·ªông</th>
                                        </tr>
                                    </thead>
                                    <tbody>
                                        {filteredServices.length > 0 ? (
                                            filteredServices.map(service => (
                                                <tr key={service.serviceID} className="service-row">
                                                    <td className="td-id">{service.serviceID}</td>
                                                    <td className="td-name">
                                                        <div className="service-name">
                                                            <span className="name-text">{service.serviceName}</span>
                                                        </div>
                                                    </td>
                                                    <td className="td-type">
                                                        <span className="service-type">{service.serviceType}</span>
                                                    </td>
                                                    <td className="td-package">
                                                        <span className="package-type">{service.packageType}</span>
                                                    </td>
                                                    <td className="td-price">
                                                        <div className="price-display">
                                                            <span className="price-amount">{service.price.toLocaleString('vi-VN')}</span>
                                                            <span className="price-currency">VNƒê</span>
                                                        </div>
                                                    </td>
                                                    <td className="td-extra">
                                                        <div className="price-display">
                                                            {service.extraSampleFee ? (
                                                                <>
                                                                    <span className="price-amount">{service.extraSampleFee.toLocaleString('vi-VN')}</span>
                                                                    <span className="price-currency">VNƒê</span>
                                                                </>
                                                            ) : (
                                                                <span className="no-fee">Kh√¥ng c√≥</span>
                                                            )}
                                                        </div>
                                                    </td>
                                                    <td className="td-status">
                                                        <span className={`status-badge ${service.status === 'Ho·∫°t ƒë·ªông' ? 'status-active' : 'status-inactive'}`}>
                                                            <span className="status-dot"></span>
                                                            {service.status}
                                                        </span>
                                                    </td>
                                                    <td className="td-actions">
                                                        <div className="action-buttons">
                                                            <button 
                                                                onClick={() => handleEditService(service)}
                                                                className="action-btn edit-btn"
                                                                title="Ch·ªânh s·ª≠a"
                                                            >
                                                                <span className="btn-icon">‚úèÔ∏è</span>
                                                                <span className="btn-text">S·ª≠a</span>
                                                            </button>
                                                            <button 
                                                                onClick={() => handleDeleteService(service.serviceID)}
                                                                className="action-btn delete-btn"
                                                                title="X√≥a"
                                                            >
                                                                <span className="btn-icon">üóëÔ∏è</span>
                                                                <span className="btn-text">X√≥a</span>
                                                            </button>
                                                        </div>
                                                    </td>
                                                </tr>
                                            ))
                                        ) : (
                                            <tr>
                                                <td colSpan="8" className="no-data">
                                                    <div className="empty-state">
                                                        <span className="empty-icon">üìä</span>
                                                        <span className="empty-text">Kh√¥ng t√¨m th·∫•y d·ªãch v·ª• n√†o</span>
                                                    </div>
                                                </td>
                                            </tr>
                                        )}
                                    </tbody>
                                </table>
                            </div>
                        </div>

                        {/* Th·ªëng k√™ */}
                        <div className="stats-section">
                            <div className="stats-grid">
                                <div className="stat-card total">
                                    <div className="stat-icon">üìä</div>
                                    <div className="stat-content">
                                        <div className="stat-label">T·ªïng d·ªãch v·ª•</div>
                                        <div className="stat-value">{services.length}</div>
                                    </div>
                                </div>
                                <div className="stat-card active">
                                    <div className="stat-icon">‚úÖ</div>
                                    <div className="stat-content">
                                        <div className="stat-label">ƒêang ho·∫°t ƒë·ªông</div>
                                        <div className="stat-value">{services.filter(s => s.status === 'Ho·∫°t ƒë·ªông').length}</div>
                                    </div>
                                </div>
                                <div className="stat-card inactive">
                                    <div className="stat-icon">‚è∏Ô∏è</div>
                                    <div className="stat-content">
                                        <div className="stat-label">Ng·ª´ng ho·∫°t ƒë·ªông</div>
                                        <div className="stat-value">{services.filter(s => s.status === 'Ng·ª´ng ho·∫°t ƒë·ªông').length}</div>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </Card>
                </div>
            )}

            {activeTab === 'surcharges' && (
                <Card className="info-card">
                    <div className="header-section">
                        <h2>Qu·∫£n l√Ω Ph·ª• ph√≠</h2>
                        <p>Qu·∫£n l√Ω ph·ª• ph√≠ theo lo·∫°i m·∫´u x√©t nghi·ªám</p>
                    </div>

                    {/* B·ªô l·ªçc v√† t√¨m ki·∫øm */}
                    <div className="filter-section">
                        <div className="search-box">
                            <input
                                type="text"
                                placeholder="T√¨m ki·∫øm lo·∫°i m·∫´u..."
                                value={searchTerm}
                                onChange={(e) => setSearchTerm(e.target.value)}
                                className="search-input"
                            />
                        </div>
                        <div className="filter-controls">
                            <Button 
                                onClick={() => setShowAddSurchargeForm(true)}
                                className="add-button"
                            >
                                + Th√™m Ph·ª• ph√≠ M·ªõi
                            </Button>
                        </div>
                    </div>

                    {/* B·∫£ng ph·ª• ph√≠ */}
                    <div className="table-responsive">
                        <table className="services-table">
                            <thead>
                                <tr>
                                    <th>ID</th>
                                    <th>Lo·∫°i m·∫´u</th>
                                    <th>Ph·ª• ph√≠ (VNƒê)</th>
                                    <th>Ghi ch√∫</th>
                                    <th>H√†nh ƒë·ªông</th>
                                </tr>
                            </thead>
                            <tbody>
                                {filteredSurcharges.length > 0 ? (
                                    filteredSurcharges.map(surcharge => (
                                        <tr key={surcharge.surchargeID}>
                                            <td>{surcharge.surchargeID}</td>
                                            <td>{surcharge.sampleType}</td>
                                            <td className="price-cell">
                                                {surcharge.surcharge ? surcharge.surcharge.toLocaleString('vi-VN') + ' VNƒê' : 'Mi·ªÖn ph√≠'}
                                            </td>
                                            <td className="note-cell">{surcharge.note}</td>
                                            <td className="actions-cell">
                                                <Button 
                                                    size="sm" 
                                                    onClick={() => handleEditSurcharge(surcharge)}
                                                    className="edit-btn"
                                                >
                                                    S·ª≠a
                                                </Button>
                                                <Button 
                                                    size="sm" 
                                                    variant="danger" 
                                                    onClick={() => handleDeleteSurcharge(surcharge.surchargeID)}
                                                    className="delete-btn"
                                                >
                                                    X√≥a
                                                </Button>
                                            </td>
                                        </tr>
                                    ))
                                ) : (
                                    <tr>
                                        <td colSpan="5" className="no-data">
                                            Kh√¥ng t√¨m th·∫•y ph·ª• ph√≠ n√†o
                                        </td>
                                    </tr>
                                )}
                            </tbody>
                        </table>
                    </div>
                </Card>
            )}

            {/* Modal ch·ªânh s·ª≠a service */}
            {editingService && (
                <EditServiceModal 
                    service={editingService}
                    onSave={handleSaveService}
                    onCancel={() => setEditingService(null)}
                />
            )}

            {/* Modal th√™m m·ªõi service */}
            {showAddServiceForm && (
                <AddServiceModal 
                    onSave={(newService) => {
                        setServices([...services, { ...newService, serviceID: Date.now() }]);
                        setShowAddServiceForm(false);
                    }}
                    onCancel={() => setShowAddServiceForm(false)}
                />
            )}

            {/* Modal ch·ªânh s·ª≠a surcharge */}
            {editingSurcharge && (
                <EditSurchargeModal 
                    surcharge={editingSurcharge}
                    onSave={handleSaveSurcharge}
                    onCancel={() => setEditingSurcharge(null)}
                />
            )}

            {/* Modal th√™m m·ªõi surcharge */}
            {showAddSurchargeForm && (
                <AddSurchargeModal 
                    onSave={(newSurcharge) => {
                        setSurcharges([...surcharges, { ...newSurcharge, surchargeID: Date.now() }]);
                        setShowAddSurchargeForm(false);
                    }}
                    onCancel={() => setShowAddSurchargeForm(false)}
                />
            )}
        </div>
    );
}

// Component Modal ch·ªânh s·ª≠a Service
const EditServiceModal = ({ service, onSave, onCancel }) => {
    const [formData, setFormData] = useState(service);

    const handleSubmit = (e) => {
        e.preventDefault();
        onSave({
            ...formData,
            price: parseFloat(formData.price),
            extraSampleFee: formData.extraSampleFee ? parseFloat(formData.extraSampleFee) : null
        });
    };

    return (
        <div className="modal-overlay">
            <div className="modal-content">
                <h3>Ch·ªânh s·ª≠a D·ªãch v·ª•</h3>
                <form onSubmit={handleSubmit}>
                    <div className="form-group">
                        <label>T√™n d·ªãch v·ª•:</label>
                        <input
                            type="text"
                            value={formData.serviceName}
                            onChange={(e) => setFormData({...formData, serviceName: e.target.value})}
                            required
                        />
                    </div>
                    <div className="form-group">
                        <label>Lo·∫°i d·ªãch v·ª•:</label>
                        <select
                            value={formData.serviceType}
                            onChange={(e) => setFormData({...formData, serviceType: e.target.value})}
                            required
                        >
                            <option value="D√¢n s·ª±">D√¢n s·ª±</option>
                            <option value="H√†nh ch√≠nh">H√†nh ch√≠nh</option>
                        </select>
                    </div>
                    <div className="form-group">
                        <label>G√≥i d·ªãch v·ª•:</label>
                        <select
                            value={formData.packageType}
                            onChange={(e) => setFormData({...formData, packageType: e.target.value})}
                            required
                        >
                            <option value="Ti√™u chu·∫©n">Ti√™u chu·∫©n</option>
                            <option value="L·∫•y nhanh">L·∫•y nhanh</option>
                        </select>
                    </div>
                    <div className="form-group">
                        <label>Gi√° (VNƒê):</label>
                        <input
                            type="number"
                            value={formData.price}
                            onChange={(e) => setFormData({...formData, price: e.target.value})}
                            required
                        />
                    </div>
                    <div className="form-group">
                        <label>Ph√≠ m·∫´u th·ª© 3 (VNƒê):</label>
                        <input
                            type="number"
                            value={formData.extraSampleFee || ''}
                            onChange={(e) => setFormData({...formData, extraSampleFee: e.target.value})}
                        />
                    </div>
                    <div className="form-group">
                        <label>Tr·∫°ng th√°i:</label>
                        <select
                            value={formData.status}
                            onChange={(e) => setFormData({...formData, status: e.target.value})}
                            required
                        >
                            <option value="Ho·∫°t ƒë·ªông">Ho·∫°t ƒë·ªông</option>
                            <option value="Ng·ª´ng ho·∫°t ƒë·ªông">Ng·ª´ng ho·∫°t ƒë·ªông</option>
                        </select>
                    </div>
                    <div className="form-actions">
                        <Button type="submit">L∆∞u</Button>
                        <Button type="button" variant="secondary" onClick={onCancel}>H·ªßy</Button>
                    </div>
                </form>
            </div>
        </div>
    );
};

// Component Modal th√™m m·ªõi Service
const AddServiceModal = ({ onSave, onCancel }) => {
    const [formData, setFormData] = useState({
        serviceName: '',
        serviceType: 'D√¢n s·ª±',
        packageType: 'Ti√™u chu·∫©n',
        price: '',
        extraSampleFee: '',
        status: 'Ho·∫°t ƒë·ªông'
    });

    const handleSubmit = (e) => {
        e.preventDefault();
        onSave({
            ...formData,
            price: parseFloat(formData.price),
            extraSampleFee: formData.extraSampleFee ? parseFloat(formData.extraSampleFee) : null
        });
    };

    return (
        <div className="modal-overlay">
            <div className="modal-content">
                <h3>Th√™m D·ªãch v·ª• M·ªõi</h3>
                <form onSubmit={handleSubmit}>
                    <div className="form-group">
                        <label>T√™n d·ªãch v·ª•:</label>
                        <input
                            type="text"
                            value={formData.serviceName}
                            onChange={(e) => setFormData({...formData, serviceName: e.target.value})}
                            required
                        />
                    </div>
                    <div className="form-group">
                        <label>Lo·∫°i d·ªãch v·ª•:</label>
                        <select
                            value={formData.serviceType}
                            onChange={(e) => setFormData({...formData, serviceType: e.target.value})}
                            required
                        >
                            <option value="D√¢n s·ª±">D√¢n s·ª±</option>
                            <option value="H√†nh ch√≠nh">H√†nh ch√≠nh</option>
                        </select>
                    </div>
                    <div className="form-group">
                        <label>G√≥i d·ªãch v·ª•:</label>
                        <select
                            value={formData.packageType}
                            onChange={(e) => setFormData({...formData, packageType: e.target.value})}
                            required
                        >
                            <option value="Ti√™u chu·∫©n">Ti√™u chu·∫©n</option>
                            <option value="L·∫•y nhanh">L·∫•y nhanh</option>
                        </select>
                    </div>
                    <div className="form-group">
                        <label>Gi√° (VNƒê):</label>
                        <input
                            type="number"
                            value={formData.price}
                            onChange={(e) => setFormData({...formData, price: e.target.value})}
                            required
                        />
                    </div>
                    <div className="form-group">
                        <label>Ph√≠ m·∫´u th·ª© 3 (VNƒê):</label>
                        <input
                            type="number"
                            value={formData.extraSampleFee}
                            onChange={(e) => setFormData({...formData, extraSampleFee: e.target.value})}
                            placeholder="ƒê·ªÉ tr·ªëng n·∫øu kh√¥ng c√≥"
                        />
                    </div>
                    <div className="form-actions">
                        <Button type="submit">Th√™m</Button>
                        <Button type="button" variant="secondary" onClick={onCancel}>H·ªßy</Button>
                    </div>
                </form>
            </div>
        </div>
    );
};

// Component Modal ch·ªânh s·ª≠a Surcharge
const EditSurchargeModal = ({ surcharge, onSave, onCancel }) => {
    const [formData, setFormData] = useState(surcharge);

    const handleSubmit = (e) => {
        e.preventDefault();
        onSave({
            ...formData,
            surcharge: formData.surcharge ? parseFloat(formData.surcharge) : null
        });
    };

    return (
        <div className="modal-overlay">
            <div className="modal-content">
                <h3>Ch·ªânh s·ª≠a Ph·ª• ph√≠</h3>
                <form onSubmit={handleSubmit}>
                    <div className="form-group">
                        <label>Lo·∫°i m·∫´u:</label>
                        <input
                            type="text"
                            value={formData.sampleType}
                            onChange={(e) => setFormData({...formData, sampleType: e.target.value})}
                            required
                        />
                    </div>
                    <div className="form-group">
                        <label>Ph·ª• ph√≠ (VNƒê):</label>
                        <input
                            type="number"
                            value={formData.surcharge || ''}
                            onChange={(e) => setFormData({...formData, surcharge: e.target.value})}
                            placeholder="ƒê·ªÉ tr·ªëng n·∫øu mi·ªÖn ph√≠"
                        />
                    </div>
                    <div className="form-group">
                        <label>Ghi ch√∫:</label>
                        <textarea
                            value={formData.note}
                            onChange={(e) => setFormData({...formData, note: e.target.value})}
                            rows="3"
                        />
                    </div>
                    <div className="form-actions">
                        <Button type="submit">L∆∞u</Button>
                        <Button type="button" variant="secondary" onClick={onCancel}>H·ªßy</Button>
                    </div>
                </form>
            </div>
        </div>
    );
};

// Component Modal th√™m m·ªõi Surcharge
const AddSurchargeModal = ({ onSave, onCancel }) => {
    const [formData, setFormData] = useState({
        sampleType: '',
        surcharge: '',
        note: ''
    });

    const handleSubmit = (e) => {
        e.preventDefault();
        onSave({
            ...formData,
            surcharge: formData.surcharge ? parseFloat(formData.surcharge) : null
        });
    };

    return (
        <div className="modal-overlay">
            <div className="modal-content">
                <h3>Th√™m Ph·ª• ph√≠ M·ªõi</h3>
                <form onSubmit={handleSubmit}>
                    <div className="form-group">
                        <label>Lo·∫°i m·∫´u:</label>
                        <input
                            type="text"
                            value={formData.sampleType}
                            onChange={(e) => setFormData({...formData, sampleType: e.target.value})}
                            required
                            placeholder="V√≠ d·ª•: M·∫´u t√≥c, M·∫´u m√≥ng tay..."
                        />
                    </div>
                    <div className="form-group">
                        <label>Ph·ª• ph√≠ (VNƒê):</label>
                        <input
                            type="number"
                            value={formData.surcharge}
                            onChange={(e) => setFormData({...formData, surcharge: e.target.value})}
                            placeholder="ƒê·ªÉ tr·ªëng n·∫øu mi·ªÖn ph√≠"
                        />
                    </div>
                    <div className="form-group">
                        <label>Ghi ch√∫:</label>
                        <textarea
                            value={formData.note}
                            onChange={(e) => setFormData({...formData, note: e.target.value})}
                            rows="3"
                            placeholder="M√¥ t·∫£ v·ªÅ ph·ª• ph√≠ n√†y..."
                        />
                    </div>
                    <div className="form-actions">
                        <Button type="submit">Th√™m</Button>
                        <Button type="button" variant="secondary" onClick={onCancel}>H·ªßy</Button>
                    </div>
                </form>
            </div>
        </div>
    );
};