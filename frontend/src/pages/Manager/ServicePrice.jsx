// pages/Manager/ServicePrice.jsx
import React, { useEffect, useState } from 'react';
import { Card, Button } from '../../components/ui/ui';
import './ServicePrice.css';
import { serviceAPI } from '../../services/api';
import { surchargeAPI } from '../../services/api';
import { Eye, EyeOff, Edit } from 'lucide-react';

export default function ServicePrice() {
    const [services, setServices] = useState([]);
    const [activeTab, setActiveTab] = useState('services');
    const [loading, setLoading] = useState(true);
    const [error, setError] = useState(null);
    const [searchTerm, setSearchTerm] = useState('');
    const [statusFilter, setStatusFilter] = useState('all');
    const [editingService, setEditingService] = useState(null);
    const [showAddServiceForm, setShowAddServiceForm] = useState(false);

    // L·∫•y danh s√°ch d·ªãch v·ª• t·ª´ API khi load trang (ch·ªâ hi·ªÉn th·ªã nh·ªØng d·ªãch v·ª• ƒëang ho·∫°t ƒë·ªông)
    useEffect(() => {
        async function fetchServices() {
            setLoading(true);
            setError(null);
            try {
                const res = await serviceAPI.getAllServices();
                // L·ªçc ch·ªâ hi·ªÉn th·ªã d·ªãch v·ª• ƒëang ho·∫°t ƒë·ªông
                const activeServices = res.data.filter(service => service.status !== 'ƒê√£ ·∫©n');
                setServices(activeServices);
            } catch (err) {
                setError('Kh√¥ng th·ªÉ t·∫£i danh s√°ch d·ªãch v·ª•');
            } finally {
                setLoading(false);
            }
        }
        fetchServices();
    }, []);

    // L·ªçc services
    const filteredServices = services.filter(service => {
        const matchesSearch = service.serviceName.toLowerCase().includes(searchTerm.toLowerCase()) ||
            service.serviceType.toLowerCase().includes(searchTerm.toLowerCase()) ||
            service.packageType.toLowerCase().includes(searchTerm.toLowerCase());
        const matchesStatus = statusFilter === 'all' || service.status === statusFilter;
        return matchesSearch && matchesStatus;
    });

    const handleEditService = (service) => {
        setEditingService(service);
    };

    // Th√™m d·ªãch v·ª• m·ªõi
    const handleAddService = async (newService) => {
        setLoading(true);
        setError(null);
        try {
            await serviceAPI.addService(newService);
            const res = await serviceAPI.getAllServices();
            setServices(res.data);
            setShowAddServiceForm(false);
        } catch (err) {
            setError('Kh√¥ng th·ªÉ th√™m d·ªãch v·ª• m·ªõi');
        } finally {
            setLoading(false);
        }
    };

    const handleSaveService = async (updatedService) => {
        setLoading(true);
        setError(null);
        try {
            await serviceAPI.updateService(updatedService.serviceID, updatedService);
            const res = await serviceAPI.getAllServices();
            setServices(res.data);
            setEditingService(null);
        } catch (err) {
            setError('Kh√¥ng th·ªÉ c·∫≠p nh·∫≠t d·ªãch v·ª•');
        } finally {
            setLoading(false);
        }
    };

    // ·∫®n/hi·ªán d·ªãch v·ª• thay v√¨ x√≥a
    const handleDeleteService = async (serviceID) => {
        if (window.confirm('B·∫°n c√≥ ch·∫Øc ch·∫Øn mu·ªën ·∫©n d·ªãch v·ª• n√†y?')) {
            setLoading(true);
            setError(null);
            try {
                // X√≥a m·ªÅm: c·∫≠p nh·∫≠t status th√†nh 'Ng·ª´ng ho·∫°t ƒë·ªông'
                const service = services.find(s => s.serviceID === serviceID);
                await serviceAPI.updateService(serviceID, { ...service, status: 'Ng·ª´ng ho·∫°t ƒë·ªông' });
                const res = await serviceAPI.getAllServices();
                setServices(res.data);
            } catch (err) {
                setError('Kh√¥ng th·ªÉ ·∫©n d·ªãch v·ª•');
            } finally {
                setLoading(false);
            }
        }
    };




    return (
        <div className="service-price-container">
            {/* Header ch√≠nh */}
            <div className="main-header">
                <h1 className="page-title">Xem b·∫£ng gi√° d·ªãch v·ª• </h1>
            </div>

            <div className="content-section">
                <Card className="info-card">

                    {/* N·ªôi dung tab Qu·∫£n l√Ω D·ªãch v·ª• */}
                    {activeTab === 'services' && (
                        <div className="stats-section-container">
                            {/* Th·ªëng k√™ */}
                            <div className="stats-section">
                                <div className="stats-grid">
                                    <div className="stat-card total">
                                        <div className="stat-icon">üìä</div>
                                        <div className="stat-content">
                                            <div className="stat-label">T·ªïng d·ªãch v·ª•</div>
                                            <div className="stat-value">{services.length}</div>
                                        </div>
                                    </div>
                                    <div className="stat-card active">
                                        <div className="stat-icon">‚úÖ</div>
                                        <div className="stat-content">
                                            <div className="stat-label">ƒêang ho·∫°t ƒë·ªông</div>
                                            <div className="stat-value">{services.filter(s => s.status === 'Ho·∫°t ƒë·ªông').length}</div>
                                        </div>
                                    </div>
                                    <div className="stat-card inactive">
                                        <div className="stat-icon">‚è∏Ô∏è</div>
                                        <div className="stat-content">
                                            <div className="stat-label">Ng·ª´ng ho·∫°t ƒë·ªông</div>
                                            <div className="stat-value">{services.filter(s => s.status === 'Ng·ª´ng ho·∫°t ƒë·ªông').length}</div>
                                        </div>
                                    </div>
                                </div>
                            </div>

                            {/* B·ªô l·ªçc v√† t√¨m ki·∫øm cho d·ªãch v·ª• */}
                            <div className="filter-section">
                                <div className="search-container">
                                    <div className="search-box">
                                        <input
                                            type="text"
                                            placeholder="T√¨m ki·∫øm d·ªãch v·ª•..."
                                            value={searchTerm}
                                            onChange={(e) => setSearchTerm(e.target.value)}
                                            className="search-input"
                                        />
                                    </div>
                                </div>
                                <div className="filter-controls">
                                    <div className="filter-group">
                                        <select
                                            value={statusFilter}
                                            onChange={(e) => setStatusFilter(e.target.value)}
                                            className="status-filter"
                                        >
                                            <option value="all">T·∫•t c·∫£ tr·∫°ng th√°i</option>
                                            <option value="Ho·∫°t ƒë·ªông">Ho·∫°t ƒë·ªông</option>
                                            <option value="Ng·ª´ng ho·∫°t ƒë·ªông">Ng·ª´ng ho·∫°t ƒë·ªông</option>
                                        </select>
                                    </div>
                                </div>
                                <div className="action-buttons">
                                    <Button
                                        onClick={() => setShowAddServiceForm(true)}
                                        className="add-button primary"
                                    >
                                        <span className="btn-icon">‚ûï</span>
                                        Th√™m D·ªãch v·ª• M·ªõi
                                    </Button>
                                </div>
                            </div>

                            {/* B·∫£ng d·ªãch v·ª• */}
                            <div className="table-container">
                                <div className="table-responsive">
                                    <table className="services-table">
                                        <thead>
                                            <tr>
                                                <th className="th-id">ID</th>
                                                <th className="th-name">T√™n D·ªãch v·ª•</th>
                                                <th className="th-type">Lo·∫°i d·ªãch v·ª•</th>
                                                <th className="th-package">G√≥i d·ªãch v·ª•</th>
                                                <th className="th-price">Gi√° (VNƒê)</th>
                                                <th className="th-extra">Ph√≠ m·∫´u th·ª© 3 (VNƒê)</th>
                                                <th className="th-status">Tr·∫°ng th√°i</th>
                                                <th className="th-actions">H√†nh ƒë·ªông</th>
                                            </tr>
                                        </thead>
                                        <tbody>
                                            {filteredServices.length > 0 ? (
                                                filteredServices.map(service => (
                                                    <tr key={service.serviceID} className="service-row">
                                                        <td className="td-id">{service.serviceID}</td>
                                                        <td className="td-name">
                                                            <div className="service-name">
                                                                <span className="name-text">{service.serviceName}</span>
                                                            </div>
                                                        </td>
                                                        <td className="td-type">
                                                            <span className="service-type">{service.serviceType}</span>
                                                        </td>
                                                        <td className="td-package">
                                                            <span className="package-type">{service.packageType}</span>
                                                        </td>
                                                        <td className="td-price">
                                                            <div className="price-display">
                                                                <span className="price-amount">{service.price.toLocaleString('vi-VN')}</span>
                                                                <span className="price-currency">VNƒê</span>
                                                            </div>
                                                        </td>
                                                        <td className="td-extra">
                                                            <div className="price-display">
                                                                {service.extraSampleFee ? (
                                                                    <>
                                                                        <span className="price-amount">{service.extraSampleFee.toLocaleString('vi-VN')}</span>
                                                                        <span className="price-currency">VNƒê</span>
                                                                    </>
                                                                ) : (
                                                                    <span className="no-fee">Kh√¥ng c√≥</span>
                                                                )}
                                                            </div>
                                                        </td>
                                                        <td className="td-status">
                                                            <span className={`status-badge ${service.status === 'Ho·∫°t ƒë·ªông' ? 'status-active' : 'status-inactive'}`}>
                                                                <span className="status-dot"></span>
                                                                {service.status}
                                                            </span>
                                                        </td>
                                                        <td className="td-actions">
                                                            <div className="actions-cell">
                                                                <button
                                                                    onClick={() => handleEditService(service)}
                                                                    className="action-btn edit-btn"
                                                                    title="Ch·ªânh s·ª≠a"
                                                                >
                                                                    <Edit size={16} />
                                                                </button>
                                                                <button
                                                                    onClick={() => handleDeleteService(service.serviceID)}
                                                                    className="action-btn delete-btn"
                                                                    title="·∫®n d·ªãch v·ª•"
                                                                >
                                                                    {service.status === 'Ho·∫°t ƒë·ªông' ? (
                                                                        <Eye size={16} />
                                                                    ) : (
                                                                        <EyeOff size={16} />
                                                                    )}
                                                                </button>
                                                            </div>
                                                        </td>
                                                    </tr>
                                                ))
                                            ) : (
                                                <tr>
                                                    <td colSpan="8" className="no-data">
                                                        <div className="empty-state">
                                                            <span className="empty-icon">üìä</span>
                                                            <span className="empty-text">Kh√¥ng t√¨m th·∫•y d·ªãch v·ª• n√†o</span>
                                                        </div>
                                                    </td>
                                                </tr>
                                            )}
                                        </tbody>
                                    </table>
                                </div>
                            </div>
                        </div>
                    )}

                </Card>
            </div>

            {/* Modal ch·ªânh s·ª≠a service */}
            {editingService && (
                <EditServiceModal
                    service={editingService}
                    onSave={handleSaveService}
                    onCancel={() => setEditingService(null)}
                />
            )}

            {/* Modal th√™m m·ªõi service */}
            {showAddServiceForm && (
                <AddServiceModal
                    onSave={handleAddService}
                    onCancel={() => setShowAddServiceForm(false)}
                />
            )}
        </div>
    );
}

// Component Modal ch·ªânh s·ª≠a Service
const EditServiceModal = ({ service, onSave, onCancel }) => {
    const [formData, setFormData] = useState(service);

    const handleSubmit = (e) => {
        e.preventDefault();
        onSave({
            ...formData,
            price: parseFloat(formData.price),
            extraSampleFee: formData.extraSampleFee ? parseFloat(formData.extraSampleFee) : null
        });
    };

    return (
        <div className="modal-overlay">
            <div className="modal-content">
                <h3>Ch·ªânh s·ª≠a D·ªãch v·ª•</h3>
                <form onSubmit={handleSubmit}>
                    <div className="form-group">
                        <label>T√™n d·ªãch v·ª•:</label>
                        <input
                            type="text"
                            value={formData.serviceName}
                            onChange={(e) => setFormData({ ...formData, serviceName: e.target.value })}
                            required
                        />
                    </div>
                    <div className="form-group">
                        <label>Lo·∫°i d·ªãch v·ª•:</label>
                        <select
                            value={formData.serviceType}
                            onChange={(e) => setFormData({ ...formData, serviceType: e.target.value })}
                            required
                        >
                            <option value="D√¢n s·ª±">D√¢n s·ª±</option>
                            <option value="H√†nh ch√≠nh">H√†nh ch√≠nh</option>
                        </select>
                    </div>
                    <div className="form-group">
                        <label>G√≥i d·ªãch v·ª•:</label>
                        <select
                            value={formData.packageType}
                            onChange={(e) => setFormData({ ...formData, packageType: e.target.value })}
                            required
                        >
                            <option value="Ti√™u chu·∫©n">Ti√™u chu·∫©n</option>
                            <option value="L·∫•y nhanh">L·∫•y nhanh</option>
                        </select>
                    </div>
                    <div className="form-group">
                        <label>Gi√° (VNƒê):</label>
                        <input
                            type="number"
                            value={formData.price}
                            onChange={(e) => setFormData({ ...formData, price: e.target.value })}
                            required
                        />
                    </div>
                    <div className="form-group">
                        <label>Ph√≠ m·∫´u th·ª© 3 (VNƒê):</label>
                        <input
                            type="number"
                            value={formData.extraSampleFee || ''}
                            onChange={(e) => setFormData({ ...formData, extraSampleFee: e.target.value })}
                        />
                    </div>
                    <div className="form-group">
                        <label>Tr·∫°ng th√°i:</label>
                        <select
                            value={formData.status}
                            onChange={(e) => setFormData({ ...formData, status: e.target.value })}
                            required
                        >
                            <option value="Ho·∫°t ƒë·ªông">Ho·∫°t ƒë·ªông</option>
                            <option value="Ng·ª´ng ho·∫°t ƒë·ªông">Ng·ª´ng ho·∫°t ƒë·ªông</option>
                        </select>
                    </div>
                    <div className="form-actions">
                        <Button type="submit">L∆∞u</Button>
                        <Button type="button" variant="secondary" onClick={onCancel}>H·ªßy</Button>
                    </div>
                </form>
            </div>
        </div>
    );
};

// Component Modal th√™m m·ªõi Service
const AddServiceModal = ({ onSave, onCancel }) => {
    const [formData, setFormData] = useState({
        serviceName: '',
        serviceType: 'D√¢n s·ª±',
        packageType: 'Ti√™u chu·∫©n',
        price: '',
        extraSampleFee: '',
        status: 'Ho·∫°t ƒë·ªông'
    });

    const handleSubmit = (e) => {
        e.preventDefault();
        onSave({
            ...formData,
            price: parseFloat(formData.price),
            extraSampleFee: formData.extraSampleFee ? parseFloat(formData.extraSampleFee) : null
        });
    };

    return (
        <div className="modal-overlay">
            <div className="modal-content">
                <h3>Th√™m d·ªãch v·ª• m·ªõi</h3>
                <form onSubmit={handleSubmit}>
                    <div className="form-group">
                        <label>T√™n d·ªãch v·ª•:</label>
                        <input
                            type="text"
                            value={formData.serviceName}
                            onChange={(e) => setFormData({ ...formData, serviceName: e.target.value })}
                            required
                        />
                    </div>
                    <div className="form-group">
                        <label>Lo·∫°i d·ªãch v·ª•:</label>
                        <select
                            value={formData.serviceType}
                            onChange={(e) => setFormData({ ...formData, serviceType: e.target.value })}
                            required
                        >
                            <option value="D√¢n s·ª±">D√¢n s·ª±</option>
                            <option value="H√†nh ch√≠nh">H√†nh ch√≠nh</option>
                        </select>
                    </div>
                    <div className="form-group">
                        <label>G√≥i d·ªãch v·ª•:</label>
                        <select
                            value={formData.packageType}
                            onChange={(e) => setFormData({ ...formData, packageType: e.target.value })}
                            required
                        >
                            <option value="Ti√™u chu·∫©n">Ti√™u chu·∫©n (2-5 ng√†y)</option>
                            <option value="L·∫•y nhanh">L·∫•y nhanh (6-24 ti·∫øng)</option>
                        </select>
                    </div>
                    <div className="form-group">
                        <label>Gi√° (VNƒê):</label>
                        <input
                            type="number"
                            value={formData.price}
                            onChange={(e) => setFormData({ ...formData, price: e.target.value })}
                            required
                        />
                    </div>
                    <div className="form-group">
                        <label>Ph√≠ m·∫´u th·ª© 3 (VNƒê):</label>
                        <input
                            type="number"
                            value={formData.extraSampleFee}
                            onChange={(e) => setFormData({ ...formData, extraSampleFee: e.target.value })}
                            placeholder="ƒê·ªÉ tr·ªëng n·∫øu kh√¥ng c√≥"
                        />
                    </div>
                    <div className="form-group">
                        <label>Tr·∫°ng th√°i:</label>
                        <select
                            value={formData.status}
                            onChange={(e) => setFormData({ ...formData, status: e.target.value })}
                            required
                        >
                            <option value="Ho·∫°t ƒë·ªông">Ho·∫°t ƒë·ªông</option>
                            <option value="Ng·ª´ng ho·∫°t ƒë·ªông">Ng·ª´ng ho·∫°t ƒë·ªông</option>
                        </select>
                    </div>
                    <div className="form-actions">
                        <Button type="submit">Th√™m</Button>
                        <Button type="button" variant="secondary" onClick={onCancel}>H·ªßy</Button>
                    </div>
                </form>
            </div>
        </div>
    );
};

// Component Modal ch·ªânh s·ª≠a Surcharge
const EditSurchargeModal = ({ surcharge, onSave, onCancel }) => {
    const [formData, setFormData] = useState(surcharge);

    const handleSubmit = (e) => {
        e.preventDefault();
        onSave({
            ...formData,
            surcharge: formData.surcharge ? parseFloat(formData.surcharge) : null
        });
    };

    return (
        <div className="modal-overlay">
            <div className="modal-content">
                <h3>Ch·ªânh s·ª≠a Ph·ª• ph√≠</h3>
                <form onSubmit={handleSubmit}>
                    <div className="form-group">
                        <label>Lo·∫°i m·∫´u:</label>
                        <input
                            type="text"
                            value={formData.sampleType}
                            onChange={(e) => setFormData({ ...formData, sampleType: e.target.value })}
                            required
                        />
                    </div>
                    <div className="form-group">
                        <label>Ph·ª• ph√≠ (VNƒê):</label>
                        <input
                            type="number"
                            value={formData.surcharge || ''}
                            onChange={(e) => setFormData({ ...formData, surcharge: e.target.value })}
                            placeholder="ƒê·ªÉ tr·ªëng n·∫øu mi·ªÖn ph√≠"
                        />
                    </div>
                    <div className="form-group">
                        <label>Ghi ch√∫:</label>
                        <textarea
                            value={formData.note}
                            onChange={(e) => setFormData({ ...formData, note: e.target.value })}
                            rows="3"
                        />
                    </div>
                    <div className="form-actions">
                        <Button type="submit">L∆∞u</Button>
                        <Button type="button" variant="secondary" onClick={onCancel}>H·ªßy</Button>
                    </div>
                </form>
            </div>
        </div>
    );
};

// Component Modal th√™m m·ªõi Surcharge
const AddSurchargeModal = ({ onSave, onCancel }) => {
    const [formData, setFormData] = useState({
        sampleType: '',
        surcharge: '',
        note: ''
    });

    const handleSubmit = (e) => {
        e.preventDefault();
        onSave({
            ...formData,
            surcharge: formData.surcharge ? parseFloat(formData.surcharge) : null
        });
    };

    return (
        <div className="modal-overlay">
            <div className="modal-content">
                <h3>Th√™m Ph·ª• ph√≠ M·ªõi</h3>
                <form onSubmit={handleSubmit}>
                    <div className="form-group">
                        <label>Lo·∫°i m·∫´u:</label>
                        <input
                            type="text"
                            value={formData.sampleType}
                            onChange={(e) => setFormData({ ...formData, sampleType: e.target.value })}
                            required
                            placeholder="V√≠ d·ª•: M·∫´u t√≥c, M·∫´u m√≥ng tay..."
                        />
                    </div>
                    <div className="form-group">
                        <label>Ph·ª• ph√≠ (VNƒê):</label>
                        <input
                            type="number"
                            value={formData.surcharge}
                            onChange={(e) => setFormData({ ...formData, surcharge: e.target.value })}
                            placeholder="ƒê·ªÉ tr·ªëng n·∫øu mi·ªÖn ph√≠"
                        />
                    </div>
                    <div className="form-group">
                        <label>Ghi ch√∫:</label>
                        <textarea
                            value={formData.note}
                            onChange={(e) => setFormData({ ...formData, note: e.target.value })}
                            rows="3"
                            placeholder="M√¥ t·∫£ v·ªÅ ph·ª• ph√≠ n√†y..."
                        />
                    </div>
                    <div className="form-actions">
                        <Button type="submit">Th√™m</Button>
                        <Button type="button" variant="secondary" onClick={onCancel}>H·ªßy</Button>
                    </div>
                </form>
            </div>
        </div>
    );
};