// pages/Manager/Feedback.jsx
import React, { useEffect, useState } from 'react';
import { Card, Button, Input } from '../../components/ui/ui';
import { Eye, MessageCircle, EyeOff } from 'lucide-react';
import './Feedback.css';

const fakeFeedbacks = [
    {
        feedbackID: 1,
        bookingID: 'BK001',
        customerName: 'Nguy·ªÖn VƒÉn A',
        comments: 'D·ªãch v·ª• x√©t nghi·ªám r·∫•t t·ªët, nh√¢n vi√™n chuy√™n nghi·ªáp v√† th√¢n thi·ªán!',
        answers: 'C·∫£m ∆°n anh ƒë√£ tin t∆∞·ªüng d·ªãch v·ª• c·ªßa ch√∫ng t√¥i!',
        rating: 5,
        createDate: '2024-06-01',
        returnDate: '2024-06-05',
        status: 'ƒê√£ tr·∫£ l·ªùi',
        isVisible: true
    },
    {
        feedbackID: 2,
        bookingID: 'BK002',
        customerName: 'Tr·∫ßn Th·ªã B',
        comments: 'Th·ªùi gian ch·ªù h∆°i l√¢u, nh∆∞ng k·∫øt qu·∫£ ch√≠nh x√°c.',
        answers: null,
        rating: 4,
        createDate: '2024-06-02',
        returnDate: null,
        status: 'Ch·ªù x√°c nh·∫≠n',
        isVisible: true
    },
    {
        feedbackID: 3,
        bookingID: 'BK003',
        customerName: 'L√™ VƒÉn C',
        comments: 'C·∫ßn c·∫£i thi·ªán quy tr√¨nh ƒëƒÉng k√Ω.',
        answers: 'Ch√∫ng t√¥i s·∫Ω c·∫£i thi·ªán quy tr√¨nh ƒë·ªÉ ph·ª•c v·ª• kh√°ch h√†ng t·ªët h∆°n.',
        rating: 3,
        createDate: '2024-06-03',
        returnDate: '2024-06-06',
        status: 'ƒê√£ tr·∫£ l·ªùi',
        isVisible: true
    },
    {
        feedbackID: 4,
        bookingID: 'BK004',
        customerName: 'Ph·∫°m Th·ªã D',
        comments: 'Excellent service! Very satisfied with the results.',
        answers: null,
        rating: 5,
        createDate: '2024-06-04',
        returnDate: null,
        status: 'Ch·ªù x√°c nh·∫≠n',
        isVisible: false
    },
    {
        feedbackID: 5,
        bookingID: 'BK005',
        customerName: 'Ho√†ng VƒÉn E',
        comments: 'Ph√≤ng kh√°m s·∫°ch s·∫Ω, thi·∫øt b·ªã hi·ªán ƒë·∫°i. Tuy nhi√™n gi√° h∆°i cao.',
        answers: 'Ch√∫ng t√¥i cam k·∫øt mang ƒë·∫øn ch·∫•t l∆∞·ª£ng d·ªãch v·ª• t·ªët nh·∫•t v·ªõi gi√° c·∫£ h·ª£p l√Ω.',
        rating: 4,
        createDate: '2024-06-05',
        returnDate: '2024-06-08',
        status: 'ƒê√£ tr·∫£ l·ªùi',
        isVisible: true
    },
    {
        feedbackID: 6,
        bookingID: 'BK006',
        customerName: 'V≈© Th·ªã F',
        comments: 'Nh√¢n vi√™n nhi·ªát t√¨nh, k·∫øt qu·∫£ nhanh ch√≥ng v√† ch√≠nh x√°c.',
        answers: null,
        rating: 5,
        createDate: '2024-06-06',
        returnDate: null,
        status: 'Ch·ªù x√°c nh·∫≠n',
        isVisible: true
    },
    {
        feedbackID: 7,
        bookingID: 'BK007',
        customerName: 'Ng√¥ Minh G',
        comments: 'C√≥ th·ªÉ c·∫£i thi·ªán h·ªá th·ªëng ƒë·∫∑t l·ªãch online ƒë·ªÉ thu·∫≠n ti·ªán h∆°n.',
        answers: 'C·∫£m ∆°n g√≥p √Ω c·ªßa b·∫°n. Ch√∫ng t√¥i ƒëang n√¢ng c·∫•p h·ªá th·ªëng ƒë·∫∑t l·ªãch.',
        rating: 3,
        createDate: '2024-06-07',
        returnDate: '2024-06-10',
        status: 'ƒê√£ tr·∫£ l·ªùi',
        isVisible: true
    },
    {
        feedbackID: 8,
        bookingID: 'BK008',
        customerName: 'ƒê·∫∑ng Th·ªã H',
        comments: 'D·ªãch v·ª• tuy·ªát v·ªùi! T√¥i s·∫Ω gi·ªõi thi·ªáu cho b·∫°n b√®.',
        answers: 'C·∫£m ∆°n b·∫°n r·∫•t nhi·ªÅu! Ch√∫ng t√¥i r·∫•t vui khi ƒë∆∞·ª£c ph·ª•c v·ª• b·∫°n.',
        rating: 5,
        createDate: '2024-06-08',
        returnDate: '2024-06-09',
        status: 'ƒê√£ tr·∫£ l·ªùi',
        isVisible: true
    },
    {
        feedbackID: 9,
        bookingID: 'BK009',
        customerName: 'B√πi VƒÉn I',
        comments: 'Th·ªùi gian ch·ªù k·∫øt qu·∫£ kh√° l√¢u, mong c·∫£i thi·ªán.',
        answers: null,
        rating: 2,
        createDate: '2024-06-09',
        returnDate: null,
        status: 'Ch·ªù x√°c nh·∫≠n',
        isVisible: true
    },
    {
        feedbackID: 10,
        bookingID: 'BK010',
        customerName: 'L√Ω Th·ªã K',
        comments: 'ƒê·ªãa ƒëi·ªÉm thu·∫≠n ti·ªán, b√°c sƒ© t∆∞ v·∫•n chi ti·∫øt v√† d·ªÖ hi·ªÉu.',
        answers: 'C·∫£m ∆°n ch·ªã ƒë√£ l·ª±a ch·ªçn d·ªãch v·ª• c·ªßa ch√∫ng t√¥i!',
        rating: 4,
        createDate: '2024-06-10',
        returnDate: '2024-06-11',
        status: 'ƒê√£ tr·∫£ l·ªùi',
        isVisible: true
    }
];

export default function Feedback() {
    const [feedbacks, setFeedbacks] = useState([]);
    const [selectedFeedback, setSelectedFeedback] = useState(null);
    const [showDetailModal, setShowDetailModal] = useState(false);
    const [showReplyModal, setShowReplyModal] = useState(false);
    const [replyText, setReplyText] = useState('');
    const [filterStatus, setFilterStatus] = useState('all');
    const [filterRating, setFilterRating] = useState('all');
    const [searchBookingID, setSearchBookingID] = useState('');

    useEffect(() => {
        setTimeout(() => setFeedbacks(fakeFeedbacks), 300);
    }, []);

    // Filter feedbacks
    const filteredFeedbacks = feedbacks.filter(feedback => {
        const statusMatch = filterStatus === 'all' || feedback.status === filterStatus;
        const ratingMatch = filterRating === 'all' || feedback.rating.toString() === filterRating;
        const bookingMatch = searchBookingID === '' || feedback.bookingID.toLowerCase().includes(searchBookingID.toLowerCase());
        return statusMatch && ratingMatch && bookingMatch;
    });

    const handleViewDetail = (feedback) => {
        setSelectedFeedback(feedback);
        setShowDetailModal(true);
    };

    const handleReply = (feedback) => {
        setSelectedFeedback(feedback);
        setReplyText(feedback.answers || '');
        setShowReplyModal(true);
    };

    const handleToggleVisibility = (feedbackID) => {
        const updatedFeedbacks = feedbacks.map(feedback => 
            feedback.feedbackID === feedbackID 
                ? { ...feedback, isVisible: !feedback.isVisible }
                : feedback
        );
        setFeedbacks(updatedFeedbacks);
        const action = updatedFeedbacks.find(f => f.feedbackID === feedbackID).isVisible ? 'hi·ªÉn th·ªã' : '·∫©n';
        alert(`ƒê√£ ${action} feedback th√†nh c√¥ng!`);
    };

    const handleSaveReply = () => {
        if (!replyText.trim()) {
            alert('Vui l√≤ng nh·∫≠p n·ªôi dung tr·∫£ l·ªùi!');
            return;
        }

        const updatedFeedbacks = feedbacks.map(feedback => 
            feedback.feedbackID === selectedFeedback.feedbackID 
                ? { 
                    ...feedback, 
                    answers: replyText,
                    returnDate: new Date().toISOString().split('T')[0],
                    status: 'ƒê√£ tr·∫£ l·ªùi'
                }
                : feedback
        );
        
        setFeedbacks(updatedFeedbacks);
        setShowReplyModal(false);
        setReplyText('');
        alert('Tr·∫£ l·ªùi feedback th√†nh c√¥ng!');
    };

    const getStatusColor = (status) => {
        switch (status) {
            case 'ƒê√£ tr·∫£ l·ªùi': return 'status-replied';
            case 'Ch·ªù x√°c nh·∫≠n': return 'status-pending';
            default: return '';
        }
    };

    const renderStars = (rating) => {
        return '‚≠ê'.repeat(rating) + ` (${rating}/5)`;
    };

    return (
        <div className="feedback-management-container">
            <Card className="feedback-card">
                <h3>üí¨ Qu·∫£n l√Ω Feedback t·ª´ Kh√°ch h√†ng</h3>
                
                {/* Filters */}
                <div className="feedback-filters">
                    <div className="filter-group">
                        <label>T√¨m theo Booking ID:</label>
                        <Input
                            type="text"
                            placeholder="Nh·∫≠p Booking ID..."
                            value={searchBookingID}
                            onChange={(e) => setSearchBookingID(e.target.value)}
                            className="search-input"
                        />
                    </div>
                    <div className="filter-group">
                        <label>Tr·∫°ng th√°i:</label>
                        <select 
                            value={filterStatus} 
                            onChange={(e) => setFilterStatus(e.target.value)}
                            className="filter-select"
                        >
                            <option value="all">T·∫•t c·∫£</option>
                            <option value="Ch·ªù x√°c nh·∫≠n">Ch·ªù x√°c nh·∫≠n</option>
                            <option value="ƒê√£ tr·∫£ l·ªùi">ƒê√£ tr·∫£ l·ªùi</option>
                        </select>
                    </div>
                    <div className="filter-group">
                        <label>ƒê√°nh gi√°:</label>
                        <select 
                            value={filterRating} 
                            onChange={(e) => setFilterRating(e.target.value)}
                            className="filter-select"
                        >
                            <option value="all">T·∫•t c·∫£</option>
                            <option value="5">5 sao ‚≠ê‚≠ê‚≠ê‚≠ê‚≠ê</option>
                            <option value="4">4 sao ‚≠ê‚≠ê‚≠ê‚≠ê</option>
                            <option value="3">3 sao ‚≠ê‚≠ê‚≠ê</option>
                            <option value="2">2 sao ‚≠ê‚≠ê</option>
                            <option value="1">1 sao ‚≠ê</option>
                        </select>
                    </div>
                </div>

                {/* Statistics */}
                <div className="feedback-stats">
                    <div className="stat-item">
                        <span className="stat-number">{feedbacks.length}</span>
                        <span className="stat-label">T·ªïng feedback</span>
                    </div>
                    <div className="stat-item">
                        <span className="stat-number">{feedbacks.filter(f => f.status === 'Ch·ªù x√°c nh·∫≠n').length}</span>
                        <span className="stat-label">Ch·ªù tr·∫£ l·ªùi</span>
                    </div>
                    <div className="stat-item">
                        <span className="stat-number">{feedbacks.filter(f => f.status === 'ƒê√£ tr·∫£ l·ªùi').length}</span>
                        <span className="stat-label">ƒê√£ tr·∫£ l·ªùi</span>
                    </div>
                    <div className="stat-item">
                        <span className="stat-number">
                            {feedbacks.length > 0 ? (feedbacks.reduce((sum, f) => sum + f.rating, 0) / feedbacks.length).toFixed(1) : '0'}
                        </span>
                        <span className="stat-label">ƒê√°nh gi√° TB</span>
                    </div>
                </div>

                {/* Table */}
                <div className="table-responsive">
                    <table className="feedback-table">
                        <thead>
                            <tr>
                                <th>#ID</th>
                                <th>üìã M√£ ƒë∆°n</th>
                                <th>üë§ Kh√°ch h√†ng</th>
                                <th>‚≠ê ƒê√°nh gi√°</th>
                                <th>üí¨ N·ªôi dung ƒë√°nh gi√°</th>
                                <th>üìÖ Ng√†y t·∫°o</th>
                                <th>üìÖ Ng√†y tr·∫£ l·ªùi</th>
                                <th>üè∑Ô∏è Tr·∫°ng th√°i</th>
                                <th>‚öôÔ∏è Thao t√°c</th>
                            </tr>
                        </thead>
                        <tbody>
                            {filteredFeedbacks.map(feedback => (
                                <tr key={feedback.feedbackID}>
                                    <td className="feedback-id">#{feedback.feedbackID}</td>
                                    <td className="booking-id">{feedback.bookingID}</td>
                                    <td>{feedback.customerName}</td>
                                    <td className="rating-cell">{renderStars(feedback.rating)}</td>
                                    <td className="comment-cell">
                                        <div className="comment-preview">
                                            {feedback.comments.length > 40 
                                                ? feedback.comments.substring(0, 40) + '...' 
                                                : feedback.comments}
                                        </div>
                                    </td>
                                    <td>{new Date(feedback.createDate).toLocaleDateString('vi-VN')}</td>
                                    <td>
                                        {feedback.returnDate 
                                            ? new Date(feedback.returnDate).toLocaleDateString('vi-VN')
                                            : '‚è≥ Ch∆∞a tr·∫£ l·ªùi'}
                                    </td>
                                    <td>
                                        <span className={`status-badge ${getStatusColor(feedback.status)}`}>
                                            {feedback.status === 'ƒê√£ tr·∫£ l·ªùi' ? '‚úÖ ƒê√£ tr·∫£ l·ªùi' : '‚è≥ Ch·ªù x√°c nh·∫≠n'}
                                        </span>
                                    </td>
                                    <td className="action-cell">
                                        <button 
                                            className="action-btn view-btn"
                                            onClick={() => handleViewDetail(feedback)}
                                            title="Xem chi ti·∫øt"
                                        >
                                            <Eye size={16} />
                                        </button>
                                        <button 
                                            className="action-btn reply-btn"
                                            onClick={() => handleReply(feedback)}
                                            title="Tr·∫£ l·ªùi feedback"
                                        >
                                            <MessageCircle size={16} />
                                        </button>
                                        <button 
                                            className={`action-btn ${feedback.isVisible ? 'hide-btn' : 'show-btn'}`}
                                            onClick={() => handleToggleVisibility(feedback.feedbackID)}
                                            title={feedback.isVisible ? '·∫®n feedback' : 'Hi·ªÉn th·ªã feedback'}
                                        >
                                            {feedback.isVisible ? (
                                                <EyeOff size={16} />
                                            ) : (
                                                <Eye size={16} />
                                            )}
                                        </button>
                                    </td>
                                </tr>
                            ))}
                        </tbody>
                    </table>
                </div>

                {filteredFeedbacks.length === 0 && (
                    <div className="no-data">
                        <p>üì≠ Kh√¥ng c√≥ feedback n√†o ph√π h·ª£p v·ªõi b·ªô l·ªçc hi·ªán t·∫°i.</p>
                    </div>
                )}
            </Card>

            {/* Detail Modal */}
            {showDetailModal && selectedFeedback && (
                <div className="modal-overlay" onClick={() => setShowDetailModal(false)}>
                    <div className="feedback-modal" onClick={(e) => e.stopPropagation()}>
                        <h3>üí¨ Chi ti·∫øt Feedback</h3>
                        <div className="feedback-detail">
                            <div className="detail-row">
                                <label>Feedback ID:</label>
                                <span>#{selectedFeedback.feedbackID}</span>
                            </div>
                            <div className="detail-row">
                                <label>Booking ID:</label>
                                <span>{selectedFeedback.bookingID}</span>
                            </div>
                            <div className="detail-row">
                                <label>Kh√°ch h√†ng:</label>
                                <span>{selectedFeedback.customerName}</span>
                            </div>
                            <div className="detail-row">
                                <label>ƒê√°nh gi√°:</label>
                                <span className="rating-display">{renderStars(selectedFeedback.rating)}</span>
                            </div>
                            <div className="detail-row">
                                <label>Feedback:</label>
                                <p className="feedback-content">{selectedFeedback.comments}</p>
                            </div>
                            <div className="detail-row">
                                <label>Tr·∫£ l·ªùi:</label>
                                <p className="answer-content">
                                    {selectedFeedback.answers || '‚è≥ Ch∆∞a c√≥ tr·∫£ l·ªùi'}
                                </p>
                            </div>
                            <div className="detail-row">
                                <label>Ng√†y t·∫°o:</label>
                                <span>{new Date(selectedFeedback.createDate).toLocaleDateString('vi-VN')}</span>
                            </div>
                            <div className="detail-row">
                                <label>Ng√†y tr·∫£ l·ªùi:</label>
                                <span>
                                    {selectedFeedback.returnDate 
                                        ? new Date(selectedFeedback.returnDate).toLocaleDateString('vi-VN')
                                        : '‚è≥ Ch∆∞a tr·∫£ l·ªùi'}
                                </span>
                            </div>
                            <div className="detail-row">
                                <label>Tr·∫°ng th√°i:</label>
                                <span className={`status-badge ${getStatusColor(selectedFeedback.status)}`}>
                                    {selectedFeedback.status === 'ƒê√£ tr·∫£ l·ªùi' ? '‚úÖ ƒê√£ tr·∫£ l·ªùi' : '‚è≥ Ch·ªù x√°c nh·∫≠n'}
                                </span>
                            </div>
                            <div className="detail-row">
                                <label>Hi·ªÉn th·ªã:</label>
                                <span className={`visibility-badge ${selectedFeedback.isVisible ? 'visible' : 'hidden'}`}>
                                    {selectedFeedback.isVisible ? 'üëÅÔ∏è Hi·ªÉn th·ªã' : 'üôà ·∫®n'}
                                </span>
                            </div>
                        </div>
                        <div className="modal-actions">
                            <Button onClick={() => setShowDetailModal(false)}>üîô ƒê√≥ng</Button>
                        </div>
                    </div>
                </div>
            )}

            {/* Reply Modal */}
            {showReplyModal && selectedFeedback && (
                <div className="modal-overlay" onClick={() => setShowReplyModal(false)}>
                    <div className="feedback-modal" onClick={(e) => e.stopPropagation()}>
                        <h3>üìù Tr·∫£ l·ªùi Feedback</h3>
                        <div className="reply-form">
                            <div className="feedback-info">
                                <p><strong>üìã Booking ID:</strong> {selectedFeedback.bookingID}</p>
                                <p><strong>üë§ Kh√°ch h√†ng:</strong> {selectedFeedback.customerName}</p>
                                <p><strong>‚≠ê ƒê√°nh gi√°:</strong> {renderStars(selectedFeedback.rating)}</p>
                                <div className="original-feedback">
                                    <strong>üí¨ Feedback:</strong>
                                    <p className="feedback-text">{selectedFeedback.comments}</p>
                                </div>
                            </div>
                            <div className="reply-input-group">
                                <label>‚úèÔ∏è N·ªôi dung tr·∫£ l·ªùi:</label>
                                <textarea
                                    value={replyText}
                                    onChange={(e) => setReplyText(e.target.value)}
                                    placeholder="Nh·∫≠p n·ªôi dung tr·∫£ l·ªùi cho kh√°ch h√†ng..."
                                    rows="5"
                                    className="reply-textarea"
                                />
                            </div>
                        </div>
                        <div className="modal-actions">
                            <Button onClick={handleSaveReply}>üì§ G·ª≠i tr·∫£ l·ªùi</Button>
                            <Button variant="outline" onClick={() => setShowReplyModal(false)}>‚ùå H·ªßy</Button>
                        </div>
                    </div>
                </div>
            )}
        </div>
    );
}