import React, { useState, useEffect, useCallback } from 'react';
import { useAuth } from '../context/AuthContext';
import { useNavigate } from 'react-router-dom';
import './BookingCreate.css';

export default function BookingCreate() {
    const { user, loading: authLoading } = useAuth();
    const navigate = useNavigate();

    // === State cho Form ƒë·∫∑t l·ªãch ===
    const [serviceType, setServiceType] = useState(''); // Lo·∫°i d·ªãch v·ª• (vd: Cha con)
    const [numSamples, setNumSamples] = useState(2); // S·ªë m·∫´u c·∫ßn x√©t nghi·ªám, m·∫∑c ƒë·ªãnh 2
    const [testType, setTestType] = useState(''); // Lo·∫°i x√©t nghi·ªám (D√¢n s·ª± / H√†nh ch√≠nh)
    const [appointmentDate, setAppointmentDate] = useState('');
    const [appointmentTime, setAppointmentTime] = useState('');
    const [notes, setNotes] = useState('');

    // State cho th√¥ng tin ng∆∞·ªùi tham gia
    const [participants, setParticipants] = useState([]);

    // State ƒë·ªÉ qu·∫£n l√Ω b∆∞·ªõc c·ªßa form (form ƒëi·ªÅn / trang x√°c nh·∫≠n)
    const [currentStep, setCurrentStep] = useState('form'); // 'form' ho·∫∑c 'confirmation'

    // Danh s√°ch c√°c lo·∫°i d·ªãch v·ª• (t·∫°m th·ªùi hardcode, b·∫°n c√≥ th·ªÉ l·∫•y t·ª´ API n·∫øu c·∫ßn)
    const serviceOptions = [
        'X√©t nghi·ªám ADN Cha con',
        'X√©t nghi·ªám ADN M·∫π con',
        'X√©t nghi·ªám ADN √îng ch√°u',
        'X√©t nghi·ªám ADN B√† ch√°u',
        'X√©t nghi·ªám ADN Anh em ru·ªôt',
        'X√©t nghi·ªám ADN Thai nhi',
    ];

    // Danh s√°ch ph∆∞∆°ng th·ª©c thu m·∫´u (c√≥ th·ªÉ l·∫•y t·ª´ API n·∫øu c·∫ßn)
    const collectionMethodOptions = [
        'T·ª± thu m·∫´u',
        'Thu m·∫´u t·∫°i nh√†/vƒÉn ph√≤ng',
        'Thu m·∫´u t·∫°i trung t√¢m',
    ];

    // === Redirect n·∫øu ch∆∞a ƒëƒÉng nh·∫≠p ===
    useEffect(() => {
        if (!authLoading && !user) {
            navigate('/login');
        }
    }, [user, authLoading, navigate]);

    // === useEffect ƒë·ªÉ t·ª± ƒë·ªông t·∫°o/c·∫≠p nh·∫≠t s·ªë l∆∞·ª£ng participants v√† collectionMethod m·∫∑c ƒë·ªãnh ===
    useEffect(() => {
        setParticipants(prevParticipants => {
            const newParticipants = Array.from({ length: numSamples }, (_, i) => {
                const existingParticipant = prevParticipants[i];

                // X√°c ƒë·ªãnh ph∆∞∆°ng th·ª©c thu m·∫´u m·∫∑c ƒë·ªãnh d·ª±a tr√™n lo·∫°i x√©t nghi·ªám v√† d·ªãch v·ª•
                let defaultCollectionMethod = '';
                if (testType === 'H√†nh ch√≠nh' || serviceType === 'X√©t nghi·ªám ADN Thai nhi') {
                    defaultCollectionMethod = 'Thu m·∫´u t·∫°i trung t√¢m';
                }

                // N·∫øu ƒë√£ c√≥ ng∆∞·ªùi tham gia t·ªìn t·∫°i, gi·ªØ l·∫°i th√¥ng tin c≈© v√† c·∫≠p nh·∫≠t collectionMethod n·∫øu c·∫ßn
                if (existingParticipant) {
                    return {
                        ...existingParticipant,
                        // C·∫≠p nh·∫≠t collectionMethod n·∫øu lo·∫°i x√©t nghi·ªám/d·ªãch v·ª• y√™u c·∫ßu m·∫∑c ƒë·ªãnh
                        collectionMethod: (testType === 'H√†nh ch√≠nh' || serviceType === 'X√©t nghi·ªám ADN Thai nhi')
                            ? defaultCollectionMethod
                            : (existingParticipant.collectionMethod || '') // Gi·ªØ l·∫°i gi√° tr·ªã c≈© n·∫øu c√≥, ho·∫∑c r·ªóng
                    };
                } else {
                    // N·∫øu l√† ng∆∞·ªùi tham gia m·ªõi, t·∫°o ƒë·ªëi t∆∞·ª£ng m·ªõi v·ªõi collectionMethod m·∫∑c ƒë·ªãnh
                    if (testType === 'H√†nh ch√≠nh') {
                        return { fullName: '', age: '', dob: '', gender: '', cccd: '', address: '', relationship: '', collectionMethod: defaultCollectionMethod };
                    } else { // D√¢n s·ª± ho·∫∑c Thai nhi
                        return { fullName: '', age: '', dob: '', collectionMethod: defaultCollectionMethod };
                    }
                }
            });
            return newParticipants;
        });
    }, [numSamples, testType, serviceType]); // C√°c dependencies ƒë·ªÉ k√≠ch ho·∫°t useEffect

    // === H√†m t·∫°o m√†u avatar ng·∫´u nhi√™n ===
    const getRandomAvatarColors = useCallback(() => {
        const rBg = Math.floor(Math.random() * 56) + 200;
        const gBg = Math.floor(Math.random() * 56) + 200;
        const bBg = Math.floor(Math.random() * 56) + 200;
        const bgColor = `rgb(${rBg}, ${gBg}, ${bBg})`;

        const rText = Math.max(0, rBg - 100);
        const gText = Math.max(0, gBg - 100);
        const bText = Math.max(0, bBg - 100);
        const textColor = `rgb(${rText}, ${gText}, ${bText})`;
        return { backgroundColor: bgColor, color: textColor };
    }, []);

    // === H√†m x·ª≠ l√Ω thay ƒë·ªïi th√¥ng tin ng∆∞·ªùi tham gia ===
    const handleParticipantChange = (index, field, value) => {
        const updatedParticipants = [...participants];
        updatedParticipants[index] = { ...updatedParticipants[index], [field]: value };
        setParticipants(updatedParticipants);
    };

    // === H√†m x·ª≠ l√Ω submit form ===
    const handleSubmitBooking = (e) => {
        e.preventDefault();

        // Ki·ªÉm tra c√°c tr∆∞·ªùng b·∫Øt bu·ªôc chung
        if (!serviceType || !testType || !appointmentDate || !appointmentTime) {
            alert('Vui l√≤ng ƒëi·ªÅn ƒë·∫ßy ƒë·ªß c√°c th√¥ng tin b·∫Øt bu·ªôc.');
            return;
        }

        // Ki·ªÉm tra s·ªë m·∫´u d·ª±a tr√™n lo·∫°i d·ªãch v·ª•
        if (serviceType === 'X√©t nghi·ªám ADN Thai nhi' && numSamples !== 2) {
            alert('D·ªãch v·ª• "X√©t nghi·ªám ADN Thai nhi" y√™u c·∫ßu ch√≠nh x√°c 2 m·∫´u.');
            return;
        }
        if (serviceType !== 'X√©t nghi·ªám ADN Thai nhi' && numSamples < 2) {
            alert('S·ªë m·∫´u x√©t nghi·ªám ph·∫£i t·ªëi thi·ªÉu l√† 2 cho d·ªãch v·ª• n√†y.');
            return;
        }

        // Ki·ªÉm tra xem t·∫•t c·∫£ th√¥ng tin ng∆∞·ªùi tham gia ƒë√£ ƒë∆∞·ª£c ƒëi·ªÅn ƒë·∫ßy ƒë·ªß ch∆∞a
        const allParticipantsFilled = participants.every(p => {
            if (testType === 'H√†nh ch√≠nh') {
                return p.fullName && p.age && p.dob && p.gender && p.cccd && p.address && p.relationship && p.collectionMethod;
            } else { // D√¢n s·ª± ho·∫∑c Thai nhi
                return p.fullName && p.age && p.dob && p.collectionMethod;
            }
        });

        if (!allParticipantsFilled) {
            alert('Vui l√≤ng ƒëi·ªÅn ƒë·∫ßy ƒë·ªß th√¥ng tin cho t·∫•t c·∫£ ng∆∞·ªùi tham gia, bao g·ªìm ph∆∞∆°ng ph√°p thu m·∫´u.');
            return;
        }

        // Chuy·ªÉn sang trang x√°c nh·∫≠n
        setCurrentStep('confirmation');
    };

    // === Render Loading State ===
    if (authLoading || !user) {
        return (
            <div style={{ display: 'flex', justifyContent: 'center', alignItems: 'center', minHeight: '100vh', fontSize: '24px' }}>
                ƒêang t·∫£i...
            </div>
        );
    }

    // === Render Confirmation Page ===
    if (currentStep === 'confirmation') {
        return (
            <div className="homepage-root">
                <header className="homepage-header">
                    <div className="header-left">
                        <nav className="header-nav">
                            <ul>
                                <li><button className="nav-link" onClick={() => navigate('/about')}>GI·ªöI THI·ªÜU</button></li>
                                <li><button className="nav-link" onClick={() => navigate('/services')}>D·ªäCH V·ª§</button></li>
                                <li><button className="nav-link" onClick={() => navigate('/info')}>TH√îNG TIN</button></li>
                                <li><button className="nav-link nav-link-highlight" onClick={() => navigate('/booking-create')}>ƒê·∫∂T L·ªäCH H·∫∏N</button></li>
                            </ul>
                        </nav>
                    </div>
                    <div className="header-right">
                        <div className="header-search-box">
                            <input type="text" placeholder="T√¨m ki·∫øm..." className="header-search-input" />
                            <button className="header-search-btn">üîç</button>
                        </div>
                        {user && (
                            <div className="header-user-profile" onClick={() => navigate('/personal-info')}>
                                <span className="header-user-info">{user.fullName || user.email}</span>
                                <div className="header-profile-icon" style={getRandomAvatarColors()}>
                                    {user.avatar ? (
                                        <img src={user.avatar} alt={user.fullName} />
                                    ) : (
                                        user.fullName ? user.fullName.split(" ").map(n => n[0]).join("").toUpperCase() : user.email?.charAt(0).toUpperCase() || ''
                                    )}
                                </div>
                            </div>
                        )}
                    </div>
                </header>

                <main className="booking-create-content">
                    <section className="confirmation-section">
                        <h2>X√°c nh·∫≠n th√¥ng tin ƒë·∫∑t l·ªãch</h2>
                        <div className="confirmation-details">
                            <p><strong>Lo·∫°i d·ªãch v·ª•:</strong> {serviceType}</p>
                            <p><strong>S·ªë m·∫´u:</strong> {numSamples}</p>
                            <p><strong>Lo·∫°i x√©t nghi·ªám:</strong> {testType}</p>
                            <p><strong>Ng√†y h·∫πn:</strong> {appointmentDate}</p>
                            <p><strong>Gi·ªù h·∫πn:</strong> {appointmentTime}</p>
                            <p><strong>Ghi ch√∫:</strong> {notes || 'Kh√¥ng c√≥'}</p>

                            <h3>Th√¥ng tin ng∆∞·ªùi tham gia:</h3>
                            {participants.length > 0 ? (
                                participants.map((p, index) => (
                                    <div key={index} className="participant-summary">
                                        <h4>Ng∆∞·ªùi tham gia {index + 1}</h4>
                                        <p>H·ªç v√† t√™n: {p.fullName || 'Ch∆∞a ƒëi·ªÅn'}</p>
                                        <p>Tu·ªïi: {p.age || 'Ch∆∞a ƒëi·ªÅn'}</p>
                                        <p>NƒÉm sinh: {p.dob || 'Ch∆∞a ƒëi·ªÅn'}</p>
                                        <p>Ph∆∞∆°ng ph√°p thu m·∫´u: {p.collectionMethod || 'Ch∆∞a ƒëi·ªÅn'}</p>
                                        {testType === 'H√†nh ch√≠nh' && (
                                            <>
                                                <p>Gi·ªõi t√≠nh: {p.gender || 'Ch∆∞a ƒëi·ªÅn'}</p>
                                                <p>CCCD: {p.cccd || 'Ch∆∞a ƒëi·ªÅn'}</p>
                                                <p>ƒê·ªãa ch·ªâ: {p.address || 'Ch∆∞a ƒëi·ªÅn'}</p>
                                                <p>Quan h·ªá: {p.relationship || 'Ch∆∞a ƒëi·ªÅn'}</p>
                                            </>
                                        )}
                                    </div>
                                ))
                            ) : (
                                <p>Kh√¥ng c√≥ th√¥ng tin ng∆∞·ªùi tham gia ƒë∆∞·ª£c y√™u c·∫ßu.</p>
                            )}
                        </div>
                        <div className="confirmation-actions">
                            <button className="btn-back" onClick={() => setCurrentStep('form')}>Ch·ªânh s·ª≠a</button>
                            <button className="btn-confirm" onClick={() => alert('X√°c nh·∫≠n ƒë·∫∑t l·ªãch...')}>X√°c nh·∫≠n ƒë·∫∑t l·ªãch</button>
                        </div>
                    </section>
                </main>

                <footer className="homepage-footer">
                    <div className="footer-section">
                        <h3>LOCATION</h3>
                        <p>70, D1, Long Th·∫°nh M·ªπ, Th·ªß ƒê·ª©c, H·ªì Ch√≠ Minh</p>
                    </div>
                    <div className="footer-section">
                        <h3>CONTACT US</h3>
                        <p>02020202304</p>
                    </div>
                    <div className="footer-section">
                        <h3>PAYMENT</h3>
                        <div className="payment-icons">
                            <div className="payment-icon-placeholder">Pay1</div>
                            <div className="payment-icon-placeholder">Pay2</div>
                        </div>
                    </div>
                </footer>
            </div>
        );
    }

    // === Render Booking Form (Default) ===
    return (
        <div className="homepage-root">
            <header className="homepage-header">
                <div className="header-left">
                    <nav className="header-nav">
                        <ul>
                            <li><button className="nav-link" onClick={() => navigate('/about')}>GI·ªöI THI·ªÜU</button></li>
                            <li><button className="nav-link" onClick={() => navigate('/services')}>D·ªäCH V·ª§</button></li>
                            <li><button className="nav-link" onClick={() => navigate('/info')}>TH√îNG TIN</button></li>
                            <li><button className="nav-link nav-link-highlight" onClick={() => navigate('/booking-create')}>ƒê·∫∂T L·ªäCH H·∫∏N</button></li>
                        </ul>
                    </nav>
                </div>
                <div className="header-right">
                    <div className="header-search-box">
                        <input type="text" placeholder="T√¨m ki·∫øm..." className="header-search-input" />
                        <button className="header-search-btn">üîç</button>
                    </div>
                    {user ? (
                        <div className="header-user-profile" onClick={() => navigate('/personal-info')}>
                            <span className="header-user-info">{user.fullName || user.email}</span>
                            <div className="header-profile-icon" style={getRandomAvatarColors()}>
                                {user.avatar ? (
                                    <img src={user.avatar} alt={user.fullName} />
                                ) : (
                                    user.fullName ? user.fullName.split(" ").map(n => n[0]).join("").toUpperCase() : user.email?.charAt(0).toUpperCase() || ''
                                )}
                            </div>
                        </div>
                    ) : (
                        <button className="header-login-button" onClick={() => navigate('/login')}>ƒêƒÉng nh·∫≠p</button>
                    )}
                </div>
            </header>

            <main className="booking-create-content">
                <form className="booking-form-section" onSubmit={handleSubmitBooking}>
                    <h2>T·∫°o L·ªãch H·∫πn M·ªõi</h2>
                    <p>Vui l√≤ng ƒëi·ªÅn th√¥ng tin d∆∞·ªõi ƒë√¢y ƒë·ªÉ ƒë·∫∑t l·ªãch x√©t nghi·ªám ADN.</p>

                    <div className="form-group">
                        <label htmlFor="serviceType">Lo·∫°i d·ªãch v·ª•:</label>
                        <select
                            id="serviceType"
                            value={serviceType}
                            onChange={(e) => {
                                const selectedService = e.target.value;
                                setServiceType(selectedService);
                                if (selectedService === 'X√©t nghi·ªám ADN Thai nhi') {
                                    setNumSamples(2); // Thai nhi lu√¥n l√† 2 m·∫´u
                                } else {
                                    setNumSamples(2); // C√°c lo·∫°i kh√°c m·∫∑c ƒë·ªãnh 2 m·∫´u
                                }
                                setTestType(''); // Reset lo·∫°i x√©t nghi·ªám khi ƒë·ªïi lo·∫°i d·ªãch v·ª•
                                // participants s·∫Ω ƒë∆∞·ª£c c·∫≠p nh·∫≠t b·ªüi useEffect khi serviceType/numSamples thay ƒë·ªïi
                            }}
                            required
                        >
                            <option value="">Ch·ªçn lo·∫°i d·ªãch v·ª•</option>
                            {serviceOptions.map((service, index) => (
                                <option key={index} value={service}>{service}</option>
                            ))}
                        </select>
                    </div>

                    {/* Hi·ªÉn th·ªã input s·ªë m·∫´u ho·∫∑c s·ªë m·∫´u c·ªë ƒë·ªãnh */}
                    {serviceType === 'X√©t nghi·ªám ADN Thai nhi' ? (
                        <div className="form-group">
                            <label>S·ªë m·∫´u c·∫ßn x√©t nghi·ªám:</label>
                            <p className="static-option">2</p>
                        </div>
                    ) : (
                        <div className="form-group">
                            <label htmlFor="numSamples">S·ªë m·∫´u c·∫ßn x√©t nghi·ªám:</label>
                            <input
                                type="number"
                                id="numSamples"
                                value={numSamples}
                                onChange={(e) => setNumSamples(Math.max(2, parseInt(e.target.value) || 2))}
                                min="2"
                                required
                            />
                        </div>
                    )}

                    <div className="form-group">
                        <label htmlFor="testType">Lo·∫°i x√©t nghi·ªám:</label>
                        <select
                            id="testType"
                            value={testType}
                            onChange={(e) => setTestType(e.target.value)}
                            required
                        >
                            <option value="">Ch·ªçn lo·∫°i x√©t nghi·ªám</option>
                            <option value="D√¢n s·ª±">D√¢n s·ª±</option>
                            <option value="H√†nh ch√≠nh">H√†nh ch√≠nh</option>
                        </select>
                    </div>

                    <div className="form-group">
                        <label htmlFor="appointmentDate">Ng√†y h·∫πn:</label>
                        <input
                            type="date"
                            id="appointmentDate"
                            value={appointmentDate}
                            onChange={(e) => setAppointmentDate(e.target.value)}
                            required
                        />
                    </div>

                    <div className="form-group">
                        <label htmlFor="appointmentTime">Gi·ªù h·∫πn:</label>
                        <input
                            type="time"
                            id="appointmentTime"
                            value={appointmentTime}
                            onChange={(e) => setAppointmentTime(e.target.value)}
                            required
                        />
                    </div>

                    <div className="form-group">
                        <label htmlFor="notes">Ghi ch√∫:</label>
                        <textarea
                            id="notes"
                            placeholder="Ghi ch√∫ th√™m (n·∫øu c√≥)"
                            value={notes}
                            onChange={(e) => setNotes(e.target.value)}
                            rows="3"
                        ></textarea>
                    </div>

                    {/* === Ph·∫ßn th√¥ng tin ng∆∞·ªùi tham gia === */}
                    <div className="participants-section">
                        <h3>Th√¥ng tin ng∆∞·ªùi tham gia:</h3>
                        {Array.from({ length: numSamples }).map((_, index) => (
                            <div key={index} className="participant-form">
                                <h4>Ng∆∞·ªùi tham gia {index + 1}</h4>
                                <div className="form-group">
                                    <label>H·ªç v√† t√™n:</label>
                                    <input
                                        type="text"
                                        value={participants[index]?.fullName || ''}
                                        onChange={(e) => handleParticipantChange(index, 'fullName', e.target.value)}
                                        required
                                    />
                                </div>
                                <div className="form-group">
                                    <label>Tu·ªïi:</label>
                                    <input
                                        type="number"
                                        value={participants[index]?.age || ''}
                                        onChange={(e) => handleParticipantChange(index, 'age', parseInt(e.target.value) || '')}
                                        min="0"
                                        required
                                    />
                                </div>
                                <div className="form-group">
                                    <label>NƒÉm sinh:</label>
                                    <input
                                        type="number"
                                        value={participants[index]?.dob || ''}
                                        onChange={(e) => handleParticipantChange(index, 'dob', parseInt(e.target.value) || '')}
                                        min="1900"
                                        max={new Date().getFullYear()}
                                        required
                                    />
                                </div>

                                {/* Ph∆∞∆°ng th·ª©c thu m·∫´u ri√™ng cho t·ª´ng ng∆∞·ªùi tham gia */}
                                {(testType === 'H√†nh ch√≠nh' || serviceType === 'X√©t nghi·ªám ADN Thai nhi') ? (
                                    <div className="form-group">
                                        <label>Ph∆∞∆°ng ph√°p thu m·∫´u:</label>
                                        <p className="static-option">Thu m·∫´u t·∫°i trung t√¢m</p>
                                    </div>
                                ) : (
                                    <div className="form-group">
                                        <label>Ph∆∞∆°ng ph√°p thu m·∫´u:</label>
                                        <select
                                            value={participants[index]?.collectionMethod || ''}
                                            onChange={(e) => handleParticipantChange(index, 'collectionMethod', e.target.value)}
                                            required
                                        >
                                            <option value="">Ch·ªçn ph∆∞∆°ng ph√°p thu m·∫´u</option>
                                            {collectionMethodOptions.map((method, methodIndex) => (
                                                <option key={methodIndex} value={method}>{method}</option>
                                            ))}
                                        </select>
                                    </div>
                                )}

                                {testType === 'H√†nh ch√≠nh' && (
                                    <>
                                        <div className="form-group">
                                            <label>Gi·ªõi t√≠nh:</label>
                                            <select
                                                value={participants[index]?.gender || ''}
                                                onChange={(e) => handleParticipantChange(index, 'gender', e.target.value)}
                                                required
                                            >
                                                <option value="">Ch·ªçn gi·ªõi t√≠nh</option>
                                                <option value="Nam">Nam</option>
                                                <option value="N·ªØ">N·ªØ</option>
                                                <option value="Kh√°c">Kh√°c</option>
                                            </select>
                                        </div>
                                        <div className="form-group">
                                            <label>CCCD:</label>
                                            <input
                                                type="text"
                                                value={participants[index]?.cccd || ''}
                                                onChange={(e) => handleParticipantChange(index, 'cccd', e.target.value)}
                                                required
                                            />
                                        </div>
                                        <div className="form-group">
                                            <label>ƒê·ªãa ch·ªâ:</label>
                                            <input
                                                type="text"
                                                value={participants[index]?.address || ''}
                                                onChange={(e) => handleParticipantChange(index, 'address', e.target.value)}
                                                required
                                            />
                                        </div>
                                        <div className="form-group">
                                            <label>Quan h·ªá v·ªõi ng∆∞·ªùi ƒëƒÉng k√Ω:</label>
                                            <input
                                                type="text"
                                                value={participants[index]?.relationship || ''}
                                                onChange={(e) => handleParticipantChange(index, 'relationship', e.target.value)}
                                                required
                                            />
                                        </div>
                                    </>
                                )}
                            </div>
                        ))}
                    </div>

                    <button type="submit" className="submit-booking-btn">Ho√†n th√†nh</button>
                </form>
            </main>

            <footer className="homepage-footer">
                <div className="footer-section">
                    <h3>LOCATION</h3>
                    <p>70, D1, Long Th·∫°nh M·ªπ, Th·ªß ƒê·ª©c, H·ªì Ch√≠ Minh</p>
                </div>
                <div className="footer-section">
                    <h3>CONTACT US</h3>
                    <p>02020202304</p>
                </div>
                <div className="footer-section">
                    <h3>PAYMENT</h3>
                    <div className="payment-icons">
                        <div className="payment-icon-placeholder">Pay1</div>
                        <div className="payment-icon-placeholder">Pay2</div>
                    </div>
                </div>
            </footer>
        </div>
    );
}